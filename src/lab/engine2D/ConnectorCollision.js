// Copyright 2016 Erik Neumann.  All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.provide('myphysicslab.lab.engine2D.ConnectorCollision');

goog.require('goog.asserts');
goog.require('myphysicslab.lab.engine2D.Connector');
goog.require('myphysicslab.lab.engine2D.RigidBody');
goog.require('myphysicslab.lab.engine2D.RigidBodyCollision');
goog.require('myphysicslab.lab.util.UtilityCore');
goog.require('myphysicslab.lab.util.Vector');

goog.scope(function() {

var Connector = myphysicslab.lab.engine2D.Connector;
var NF5 = myphysicslab.lab.util.UtilityCore.NF5;
var NF7 = myphysicslab.lab.util.UtilityCore.NF7;
var NF9 = myphysicslab.lab.util.UtilityCore.NF9;
var NFE = myphysicslab.lab.util.UtilityCore.NFE;
var RigidBody = myphysicslab.lab.engine2D.RigidBody;
var RigidBodyCollision = myphysicslab.lab.engine2D.RigidBodyCollision;
var UtilityCore = myphysicslab.lab.util.UtilityCore;
var Vector = myphysicslab.lab.util.Vector;

/** A RigidBodyCollision generated by a Connector.

* @param {!myphysicslab.lab.engine2D.RigidBody} body the first body of the collision
* @param {!myphysicslab.lab.engine2D.RigidBody} normalBody the second body of the
  collision, which often determines the normal vector
* @param {!myphysicslab.lab.engine2D.Connector} theConnector the Connector that
  generated this collision
* @param {boolean} joint whether this is a bilateral constraint which can both
    push and pull.
* @constructor
* @final
* @struct
* @extends {myphysicslab.lab.engine2D.RigidBodyCollision}
*/
myphysicslab.lab.engine2D.ConnectorCollision = function(body, normalBody, theConnector,
     joint) {
  RigidBodyCollision.call(this, body, normalBody, joint);
  /** Connector that generated this collision
  * @type {!myphysicslab.lab.engine2D.Connector}
  * @private
  */
  this.theConnector_ = theConnector;
};
var ConnectorCollision = myphysicslab.lab.engine2D.ConnectorCollision;
goog.inherits(ConnectorCollision, RigidBodyCollision);

if (!UtilityCore.ADVANCED) {
  /** @inheritDoc */
  ConnectorCollision.prototype.toString = function() {
    return ConnectorCollision.superClass_.toString.call(this).slice(0, -1)
        +', theConnector_='+this.theConnector_+'}';
  };
};

/** @inheritDoc */
ConnectorCollision.prototype.getClassName = function() {
  return 'ConnectorCollision';
};

/** @inheritDoc */
ConnectorCollision.prototype.checkConsistent = function() {
  ConnectorCollision.superClass_.checkConsistent.call(this);
  goog.asserts.assert( this.impact2 != null );
  if (this.normal_dt != null) {
    // Having derivative of normal implies the normal is curved.
    // unless the derivative is always zero.
    goog.asserts.assert( this.ballNormal);
  }
};

/** @inheritDoc */
ConnectorCollision.prototype.getConnector = function() {
  return this.theConnector_;
};

/** @inheritDoc */
ConnectorCollision.prototype.similarTo = function(c) {
  return false;
};

/** @inheritDoc */
ConnectorCollision.prototype.updateCollision = function(time) {
  this.theConnector_.updateCollision(this);
  ConnectorCollision.superClass_.updateCollision.call(this, time);
};

}); // goog.scope
