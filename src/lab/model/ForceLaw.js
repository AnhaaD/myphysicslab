// Copyright 2016 Erik Neumann.  All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the 'License');
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

goog.module('myphysicslab.lab.model.ForceLaw');

const Printable = goog.require('myphysicslab.lab.util.Printable');
const Force = goog.require('myphysicslab.lab.model.Force');
const MassObject = goog.require('myphysicslab.lab.model.MassObject');

/** Calculates {@link Force}s on {@link MassObject}s, for example gravity, damping,
spring force, etc.

* @interface
*/
class ForceLaw extends Printable {
constructor() {
  super();
};

/** Returns a list of Forces generated by this ForceLaw.
* @return {!Array<!Force>} list of forces generated by this ForceLaw.
*/
calculateForces() {}

/** Ensures this ForceLaw is not connected to anything and so can be garbage collected.
For example, if this ForceLaw is an {@link myphysicslab.lab.util.Observer}, this will
stop observing its Subject.
* @return {undefined}
*/
disconnect() {}

/** Returns list of MassObjects being affected by this ForceLaw.
* @return {!Array<!MassObject>} list of MassObjects being affected by this ForceLaw
*/
getBodies() {}

/** Returns the potential energy due to this ForceLaw.
* @return {number} the potential energy due to this ForceLaw
*/
getPotentialEnergy() {}

} //end class
exports = ForceLaw;
